<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///INNIT attritualtube

//Innit sped
spd_normal = 3
spd_roll = 8
spd_idle = 0
spd_run = 5

grav = 0.6
moveX = 0
moveY = 0

//innit state
state = "idle"
sprite_index = s_player_idle
my_spd = spd_normal

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///controll

//i n p u t
inputS    = keyboard_check_pressed(ord("S"));
inputA    = keyboard_check(ord("A"));
inputRelS = keyboard_check_released(ord("S"));
inputD    = keyboard_check(ord("D"));
inputW   = keyboard_check_pressed(ord("S"))
inputSpace    = keyboard_check_pressed("vk_space");
inputShift    = keyboard_check("vk_shift");
//logic generator
if (moveY &lt; 10)
{
    moveY = min(moveY + grav, 9);
}
//state changin
if (state == "idle") {
    sprite_index = s_player_idle;
    image_speed = 1/3;
    if (inputW)
        moveY = -12;
    if (inputS)
    {
        state = "crouch";
    }
    if(inputA or inputD)
    state = "move"
}
else if( state == "move"){
    sprite_index = s_player_move;
    
    if (inputW) moveY = -12;
    if ( inputShift ) {my_spd = spd_run; }
    else{ my_spd = spd_normal; }
    
    moveX = (inputD - inputA) * my_spd;
    
    if (inputD + inputA == 0) { state = "idle" }
}

else if (state == "crouch") {
    sprite_index = s_player_crouch;
    if (inputS) {
        state = "idle";
    }
}
//logic fly under the radar
if(place_meeting(x , y + moveY , o_ground)) {
    while(not place_meeting(x, y+sign(moveY),o_ground)) {
    y += sign(moveY) ;
    }
    moveY = 0;
}
if(place_meeting(x + moveX , y, o_ground)) {
    while(not place_meeting(x + sign(moveX), y,o_ground)) {
    y += sign(moveY) ;
    }
    moveY = 0;
}
//apply fard
y += moveY;
x += moveX;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///controll but for images

if(moveX &lt; 0) {
    image_xscale = -1;
}
else if (moveX &gt; 0) {
 image_xscale = 1;
 }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
